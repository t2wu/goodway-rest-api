openapi: 3.0.0
info:
  title: Goodway Smart Home REST API
  version: 0.0.3
  description: |-
    0.0.3

    1. 新增 Scene, scene 的 kind 指名哪種類型
    2. Room 有 onScene 跟 offScene id
    3. 新增 patch ops, Scene PATCH 方法使用 ops (其他物件待修)
    4. Assistant (alexa) 的 on/off 可以操控單一 device (location 放空 device 放描述性字串）


    目前 CES 沒有要實作的部分：
    1. pagination (offset, limit)
    2. 部分選取 (field)
  contact:
    name: John Peng
    email: john_peng@goodway.com.tw
    url: goodeway.com
  termsOfService: 'http://goodway.com/terms-of-use/'
  license:
    name: Goodway License
    url: 'http://goodway.com/license/'
servers:
  - url: 'http://api.goodway.com'
    description: Production
  - description: Development
    url: 'http://api.goodway.com'
paths:
  /gateways:
    get:
      summary: Get all gateways
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  gateways:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: "gateway's token02"
                        dn:
                          type: string
                          description: 'device name; '
                        muri:
                          type: string
                          description: mqtt uri; for publishing
                        mtopic:
                          type: string
                          description: mqtt topic; ; for publishing
                        mport:
                          type: string
                          description: mqtt port; for publishing
                        devices:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                                description: "device's token02"
                              dn:
                                type: string
                              status:
                                type: integer
                                description: '1:on, 2:off'
        '400':
          description: Bad Request
      description: Get all gateways (light switches) this user has.
      tags:
        - Gateways
      parameters:
        - schema:
            type: string
          in: query
          name: offset
          description: Pagination offset (from which record)
        - schema:
            type: string
          in: query
          name: limit
          description: Pagination limit (how many records returned)
        - schema:
            type: string
            pattern: "(\\d+)(,\\d+)*"
          in: query
          name: fields
          description: Show only json object with comma separated keys
        - schema:
            type: string
          in: header
          name: 'Authorization: Bearer "JWT"'
      requestBody: {}
    post:
      summary: Create a gateway
      description: Create a new gateway
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                dn:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  tk01:
                    type: string
                    description: tk01 saved for further implementation
                  tk02:
                    type: string
                    description: tk02 used for connection (gateway ID)
                  muri:
                    type: string
                    description: mqtt uri; for subscribing
                  mtopic:
                    type: string
                    description: mqtt topic; for subscribing
                  mcert:
                    type: string
                    description: 'mqtt cert; for subscribing & publishing'
                  mkey:
                    type: string
                    description: 'mqtt private key; for subscribing & publishing'
                  mrca:
                    type: string
                    description: 'mqtt root ca; for subscribing & publishing'
                  mcid:
                    type: string
                    description: 'mqtt client id; for subscribing & publishing'
                  mport:
                    type: integer
                    description: mqtt port; for subscribing
                  umtopic:
                    type: string
                    description: "user's mqtt topic; for publishing"
                  umuri:
                    type: string
                    description: "user's mqtt uri; for publishing"
                  umport:
                    type: integer
                    description: "user's mqtt port; for publishing"
          headers: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    description: 'code; 2:parse error, 3:jwt error 1, 4:jwt error2 5:duplicate'
      tags:
        - Gateways
      operationId: ''
      parameters:
        - schema:
            type: string
          in: header
          name: 'Authorization: Bearer "JWT"'
    put:
      summary: Update one or more gateways
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Gateway'
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: object
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/Gateway'
              type: array
      tags:
        - Gateways
    patch:
      summary: Patch one or more gateways
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Gateway'
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: object
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/Gateway'
              type: array
      tags:
        - Gateways
    delete:
      summary: Delete one or more gateways
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Gateway'
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Gateways
      description: ''
    parameters: []
  '/gateways/{id}':
    parameters:
      - type: string
        name: id
        in: path
        required: true
    get:
      summary: the gateway
      operationId: ''
      description: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gateway'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Gateways
      parameters:
        - schema:
            type: string
            pattern: "(\\d+)(,\\d+)*"
          in: query
          name: fields
          description: Show only json object with comma separated keys
    put:
      summary: Update the gateway
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gateway'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gateway'
      tags:
        - Gateways
    patch:
      summary: Patch the gateway
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gateway'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gateway'
      tags:
        - Gateways
    delete:
      summary: Delete the gateway
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                description: ''
                properties:
                  code:
                    type: integer
                    description: '3:gateway error, 4:children available'
      tags:
        - Gateways
      description: Delete the gateway based on the id
  /rooms/:
    get:
      summary: Get all rooms
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Room'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: Get all rooms (light switches) this user has.
      tags:
        - Rooms
      parameters:
        - schema:
            type: string
          in: query
          name: offset
          description: Pagination offset (from which record)
        - schema:
            type: string
          in: query
          name: limit
          description: Pagination limit (how many records returned)
        - schema:
            type: string
            pattern: "(\\d+)(,\\d+)*"
          in: query
          name: fields
          description: Show only json object with comma separated keys
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
    post:
      summary: Create a room
      description: Create a new room
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Room'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Rooms
    put:
      summary: Update one or more rooms
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Room'
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: object
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/Room'
              type: array
      tags:
        - Rooms
    patch:
      summary: Patch one or more rooms
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Room'
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: object
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Room'
              type: array
      tags:
        - Rooms
    delete:
      summary: Delete one or more rooms
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Room'
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Rooms
    parameters: []
  '/rooms/{id}':
    parameters:
      - type: string
        name: id
        in: path
        required: true
    get:
      summary: Create a room
      operationId: ''
      description: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Rooms
      parameters:
        - schema:
            type: string
            pattern: "(\\d+)(,\\d+)*"
          in: query
          name: fields
          description: Show only json object with comma separated keys
    put:
      summary: Update the room
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      tags:
        - Rooms
    patch:
      summary: Patch the room
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      tags:
        - Rooms
    delete:
      summary: Delete the room
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Rooms
      description: Delete the room based on the id
  '/devices/{id}':
    parameters:
      - type: string
        name: id
        in: path
        required: true
    get:
      summary: Get the device
      operationId: ''
      description: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Devices
      parameters:
        - schema:
            type: string
            pattern: "(\\d+)(,\\d+)*"
          in: query
          name: fields
          description: Show only json object with comma separated keys
    put:
      summary: Update the device
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      tags:
        - Devices
    patch:
      summary: Patch the device
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                kind:
                  type: string
                  example: collection
                  pattern: ^collection$
                contents:
                  type: array
                  items:
                    $ref: '#/components/schemas/Device'
          application/xml:
            schema:
              type: object
        description: ''
      tags:
        - Devices
    delete:
      summary: Delete the device
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    description: '3:device error'
      tags:
        - Devices
      description: Delete the device based on the id
  /assistant/execute/:
    parameters: []
    post:
      summary: Execute a scene.
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: 'For command such as "Alexa, execute scene {scene}"'
      tags:
        - Virtual assistant
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                scene:
                  type: string
                  example: away
  /assistant/on/:
    post:
      summary: 'Turn on all lights [in the living room]'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: 'For command such as "Alexa, turn on all lights" or "Alexa, turn on all lights in the living room".'
      tags:
        - Virtual assistant
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                location:
                  type: string
                  example: living room
                device:
                  type: string
        description: ''
    parameters: []
  /assistant/off/:
    post:
      summary: 'Turn off all lights [in the living room]'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: 'For command such as "Alexa, turn off all lights" or "Alexa, turn off all lights in the living room".'
      tags:
        - Virtual assistant
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                location:
                  type: string
                  example: living room
                device:
                  type: string
        description: ''
    parameters: []
  /assistant/tracker/:
    parameters: []
    post:
      summary: Find an item
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: 'Find the item such for command such as "Alexa, where is my wallet" where "wallet" is the item'
      tags:
        - Virtual assistant
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                item:
                  type: string
                  example: wallet
  '/gateways/{id}/rooms/':
    parameters:
      - type: string
        name: id
        in: path
        required: true
    get:
      summary: Get all the rooms within this gateway
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                kind:
                  type: string
                  example: collection
                  pattern: ^collection$
                contents:
                  type: array
                  items:
                    $ref: '#/components/schemas/Room'
        description: ''
      tags:
        - Rooms
      description: Get all the rooms within this gateway
  '/rooms/{id}/devices':
    parameters:
      - type: string
        name: id
        in: path
        required: true
    get:
      summary: Get all devices within the room
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Device'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Devices
      description: Get all devices within the room
  /trackers/:
    get:
      summary: Get all trackers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tracker'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: Get all trackers (light switches) this user has.
      tags:
        - Trackers
      parameters:
        - schema:
            type: number
            minimum: 0
            maximum: 0
          in: query
          name: offset
          description: Pagination offset (from which record)
        - schema:
            type: number
            minimum: 1
          in: query
          name: limit
          description: Pagination limit (how many records returned)
        - schema:
            type: string
            pattern: "(\\d+)(,\\d+)*"
          in: query
          name: fields
          description: Show only json object with comma separated keys
    post:
      summary: Create a tracker
      description: Create a new tracker
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tracker'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tracker'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Trackers
    put:
      summary: Update one or more trackers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tracker'
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: object
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tracker'
              type: array
      tags:
        - Trackers
    patch:
      summary: Patch one or more trackers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tracker'
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: object
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tracker'
              type: array
      tags:
        - Trackers
    delete:
      summary: Delete one or more trackers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tracker'
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Trackers
    parameters: []
  '/trackers/{id}':
    parameters:
      - type: string
        name: id
        in: path
        required: true
    get:
      summary: Get the tracker
      operationId: ''
      description: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tracker'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Trackers
      parameters:
        - schema:
            type: string
            pattern: "(\\d+)(,\\d+)*"
          in: query
          name: fields
          description: Show only json object with comma separated keys
    put:
      summary: Update the tracker
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tracker'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tracker'
      tags:
        - Trackers
    patch:
      summary: Patch the tracker
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tracker'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                kind:
                  type: string
                  example: collection
                  pattern: ^collection$
                contents:
                  type: array
                  items:
                    $ref: '#/components/schemas/Tracker'
          application/xml:
            schema:
              type: object
        description: ''
      tags:
        - Trackers
    delete:
      summary: Delete the tracker
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tracker'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Trackers
      description: Delete the tracker based on the id
  /devices:
    get:
      summary: Get all devices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Device'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      description: Get all devices (light switches) this user has.
      tags:
        - Devices
      parameters:
        - schema:
            type: number
            minimum: 0
            maximum: 0
          in: query
          name: offset
          description: Pagination offset (from which record)
        - schema:
            type: number
            minimum: 1
          in: query
          name: limit
          description: Pagination limit (how many records returned)
        - schema:
            type: string
            pattern: "(\\d+)(,\\d+)*"
          in: query
          name: fields
          description: Show only json object with comma separated keys
    post:
      summary: Create a device
      description: Create a new device
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                t:
                  type: integer
                  description: '1:lightswitch, 2:tracker'
                pid:
                  type: string
                  description: "gateway's token02;  required for t:1 (lightswitch) only"
                uuid:
                  type: string
                  description: ''
                dn:
                  type: string
                  description: device name
                status:
                  type: integer
                  description: '1:on, 2:off'
              required:
                - t
                - uuid
        description: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  tk01:
                    type: string
                    description: tk01 saved for further implementation
                  tk02:
                    type: string
                    description: 'for lightswitch (t:1) only; tk02 used for connection (device ID)'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    description: '2:parse error, 3:device error, 4:gateway not exist, 5:gateway offline, 6:device duplicate'
      tags:
        - Devices
      parameters:
        - schema:
            type: string
          in: header
          name: 'Authorization: Bearer "JWT"'
    put:
      summary: Update one or more devices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Device'
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: object
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/Device'
              type: array
      tags:
        - Devices
    patch:
      summary: Patch one or more devices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Device'
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: object
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/Device'
              type: array
      tags:
        - Devices
    delete:
      summary: Delete one or more devices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  kind:
                    type: string
                    example: collection
                    pattern: ^collection$
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Device'
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Devices
      parameters: []
    parameters: []
  /users:
    post:
      summary: ''
      operationId: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  jwt:
                    type: string
                    description: json web token
                  muri:
                    type: string
                    description: mqtt uri; for subscribing
                  mtopic:
                    type: string
                    description: mqtt topic; for subscribing
                  mcert:
                    type: string
                    description: mqtt cert; for subscribing
                  mkey:
                    type: string
                    description: mqtt private key; for subscribing
                  mrca:
                    type: string
                    description: mqtt root ca; for subscribing
                  mcid:
                    type: string
                    description: mqtt client id; for subscribing
                  mport:
                    type: integer
                    description: mqtt port; for subscribing
                  sessid:
                    type: string
                    description: sessid for current app; for checking mqtt ....; for subscribing
                  mrtopic:
                    type: string
                    description: mqtt return topic
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    description: '2:parse error, 3:user error, 4:password error, 5:others'
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                mn:
                  type: string
                  description: mobile number
                pwd:
                  type: string
                  description: password
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              type: object
              properties: {}
          text/html:
            schema:
              type: object
              properties: {}
          text/plain:
            schema:
              type: object
              properties: {}
          application/EDI-X12:
            schema:
              type: object
              properties: {}
          application/EDIFACT:
            schema:
              type: object
              properties: {}
          application/atom+xml:
            schema:
              type: object
              properties: {}
          application/font-woff:
            schema:
              type: object
              properties: {}
          application/gzip:
            schema:
              type: object
              properties: {}
          application/javascript:
            schema:
              type: object
              properties: {}
        description: ''
  /gateways/jwt:
    post:
      summary: ''
      operationId: post-gateways-jwt
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  gwjwt:
                    type: string
                    description: 'gateway jwt for initialing gateway & accesing cloud'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    description: 'error code; 2:parse error, 3:duplicate, 4:others'
      parameters:
        - schema:
            type: string
          in: header
          name: 'Authorization: Bearer "JWT"'
      description: get gateway jwt from app for initialing gateway
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  description: "gateway's uuid"
              required:
                - uuid
      tags:
        - Gateways
  '/scenes/{id}':
    parameters:
      - type: string
        name: id
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags:
        - Scenes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scene'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: ''
    put:
      summary: ''
      operationId: 'put-scenes-{id}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scene'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Scenes
    patch:
      summary: ''
      operationId: 'patch-scenes-{id}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scene'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ops:
                  type: array
                  description: Array of operations
                  items:
                    $ref: '#/components/schemas/PatchOp'
      tags:
        - Scenes
    delete:
      summary: ''
      operationId: 'delete-scenes-{id}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scene'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Scenes
  /scenes/:
    get:
      summary: Get all scenes
      tags:
        - Scenes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    type: string
                    example: ^collection$
                    pattern: collection
                  contents:
                    type: array
                    items:
                      $ref: '#/components/schemas/Scene'
          headers: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: ''
      requestBody: {}
      parameters:
        - schema:
            type: number
            minimum: 0
            maximum: 0
          in: query
          name: offset
          description: Pagination offset (from which record)
        - schema:
            type: number
            minimum: 1
          in: query
          name: limit
          description: Pagination limit (how many records returned)
        - schema:
            type: string
            pattern: "(\\d+)(,\\d+)*"
          in: query
          name: fields
          description: Show only json object with comma separated keys
    post:
      summary: Create a scene
      tags:
        - Scenes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Scene'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scene'
        description: ''
    put:
      summary: Update one or more scenes
      tags:
        - Scenes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Scene'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scene'
    delete:
      summary: Delete one or more scene
      tags:
        - Scenes
      operationId: ''
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Scene'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Scene'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update one or more scenes (diff)
      tags:
        - Scenes
      operationId: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                contents:
                  type: array
                  description: Array of device operations
                  items:
                    type: object
                    properties:
                      ops:
                        type: array
                        description: Array of operations
                        items:
                          $ref: '#/components/schemas/PatchOp'
                      id:
                        type: string
                        description: Scene id to modify
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  scenes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Scene'
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Gateway:
      title: Gateway
      type: object
      x-examples: {}
      description: ''
      properties:
        id:
          type: string
          format: uuid
          example: 1f00675c-d18f-4ff6-b042-fdbe3403939a
        kind:
          type: string
          example: Gateway
        model:
          type: string
          example: YK123
        rooms:
          type: object
          properties:
            kind:
              type: string
              example: collections
              pattern: ^collections$
            contents:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                partial:
                  type: boolean
                  example: true
                kind:
                  type: string
                  example: Room
        devices:
          type: object
          properties:
            kind:
              type: string
              example: collections
              pattern: ^collections$
            contents:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                partial:
                  example: true
                  type: boolean
                kind:
                  type: string
                  example: Device
        name:
          type: string
          example: My gateway
        href:
          type: string
          example: /gateways/1f00675c-d18f-4ff6-b042-fdbe3403939a
    Device:
      title: Device
      type: object
      x-examples: {}
      properties:
        id:
          type: string
          format: uuid
          example: 3519b134-f047-420b-ba20-a4b5490ea4c0
        kind:
          type: string
          example: lightSwitchDevice
        model:
          type: string
          example: YK123
        name:
          type: string
          example: Living room light
        roomID:
          type: string
          example: fdae22a2-a4c6-461b-83c3-d0368dd46329
        gatewayID:
          type: string
          example: 1f00675c-d18f-4ff6-b042-fdbe3403939a
        deviceStatuses:
          type: array
          items:
            type: object
            properties:
              light:
                type: string
        href:
          type: string
          example: /device/3519b134-f047-420b-ba20-a4b5490ea4c0
      required:
        - id
        - model
        - name
        - gatewayID
    Room:
      title: Room
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: fdae22a2-a4c6-461b-83c3-d0368dd46329
        kind:
          type: string
          example: room
          pattern: ^Room$
        gatewayID:
          type: string
          example: 1f00675c-d18f-4ff6-b042-fdbe3403939a
        devices:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: device id
        offSceneId:
          type: string
          description: Home scene id for this room
        onSceneId:
          type: string
          description: Away scene id for this room
      x-examples: {}
    Error:
      title: Error
      type: object
      properties:
        developerMessage:
          type: string
        userMessage:
          type: string
        moreInfo:
          type: string
          example: 'https://xyz.com/doc/errors/101'
        code:
          type: integer
      description: ''
    Tracker:
      title: Tracker
      type: object
      properties:
        id:
          type: string
        kind:
          type: string
          example: Tracker
          pattern: ^Tracker$
        model:
          type: string
        name:
          type: string
        href:
          type: string
    PatchOp:
      title: PatchOp
      type: object
      properties:
        op:
          type: string
          enum:
            - add
            - replace
            - remove
          example: add
          description: Type of operation
        path:
          type: string
          description: Path to manipulate
        value:
          type: string
          description: Value of manipulation (for add or replace)
      description: Patch operation
    Scene:
      title: Scene
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          description: name of the scene
        devices:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: device id
              action:
                type: object
                description: 'Actions for this device (which, and what)'
                properties:
                  light:
                    type: string
                    example: '"on"'
                    description: Turn light on or off
        roomId:
          type: string
          description: 'If tag is "roomOnScene" or "roomOffScene", then this roomId show which room it belongs to.'
        kind:
          type: string
          description: What kind of scene it is (can be customized)
          example: awayScene
          enum:
            - homeScene
            - awayScene
            - bedScene
            - awakeScene
            - travelScene
            - roomOnScene
            - roomOffScene
            - customScene
  securitySchemes:
    API Key - 1:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: ''
          refreshUrl: ''
          scopes: []
        authorizationCode:
          authorizationUrl: ''
          tokenUrl: ''
          refreshUrl: ''
          scopes: []
